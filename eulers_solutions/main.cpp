#include <iostream>
//#include <cstdint>
#include <string>
#include <sstream>

using namespace std;

/** \brief
 * If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
           Find the sum of all the multiples of 3 or 5 below 1000.
 * \param: None
 * \return:the sum of all the multiples of 3 or 5 below 1000.
 *
 */
int multiplesOfThreeAndFive()
{
  int sum =0;
  for (int i=0; i< 1000 ; i++)
  {

    if(i % 3 == 0 || i % 5 == 0)
    {
      sum = sum + i;
    }

  }
   return sum;
}


/** \brief
 *
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 * \param: None
 * \return: the sum of the even-valued terms
 *
 */
int sumOFEvenVAluedTermsFibonacci()
{
  int sum = 0, first = 1, second = 2, febNo = 1, i = 1;
  while (febNo <= 4000000)
  {
       if (i <= 2)
       {
        febNo = i;
       }
       else
       {
        febNo = first + second;
        first = second;
        second = febNo;
       }

    if(febNo % 2 == 0)
    {
      sum = sum + febNo;
    }
    i++;
  }

return sum;
}



/** \brief
 *
The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?
 * \param: None
 * \return: largest prime factor of the number 600851475143
 *
 */
 int largestPrimeFactor()
 {
  unsigned long long num = 600851475143ULL;

  for ( unsigned long long i = 2; i*i < num; ++i)
  {
    while (num % i == 0)
    {
      if (num > i)
      {
        num /= i; // keep reducing the number once the factor is found so that we dont have to compute everything again.
      }
      //cout << "Factor is: " << i << endl;
      //cout << "Number  is: " << num << endl;
    }
  }
    return num;
 }


/** \brief
 *  Helper Function reverse Digits for the function largestPalindromeProduct
 * \param: int num : integer value whose digits have to be reversed.
 * \return: revNum : the reversed digits of parameter num
 *
 */
//
 int reverseDigits(int num)
{
    int revNum = 0;

    while (num != 0)
    {
        int digit = num % 10;
        revNum = revNum * 10 + digit;
        num /= 10;
    }

    return revNum;
}

/** \brief
 *
A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
Find the largest palindrome made from the product of two 3-digit numbers.
 * \param: None
 * \return: largest palindrome made from the product of two 3-digit numbers
 */
 int largestPalindromeProduct()
 {
  int num = 0;
  for (int i = 999; i>100; i--)
  {
     for(int j = i; j> 100; j--)
     {
        int val = i*j;
        if( val > num && reverseDigits(val) == val)
        {
          num = val;
          //cout << "Palindrome is: "<<num<<endl;
        }
     }

     }
    return num;
  }

int main()
{
    cout<<"---------------------------------------------------------------------"<<endl;
    cout <<"This Program is to keep track of solutions to the problems posted on" << endl;
    cout <<"Project Euler"<<endl;
    cout<<"---------------------------------------------------------------------"<<endl<<endl<<endl;

    cout<<"---------------------------------------------------------------------"<<endl;
    cout<< "Problem 1: Sum of all the multiples of 3 or 5 below 1000 is: "<<endl;
    cout<< multiplesOfThreeAndFive() <<endl;
    cout<<"---------------------------------------------------------------------"<<endl;


    cout<< "Problem 2: Sum of even valued terms in a Fibonacci series below 4 million is: "<<endl;
    cout<< sumOFEvenVAluedTermsFibonacci() <<endl;
    cout<<"---------------------------------------------------------------------"<<endl;


    cout<< "Problem 3: Largest Prime Factor of 600851475143 is: "<<endl;
    cout<< largestPrimeFactor() <<endl;
    cout<<"---------------------------------------------------------------------"<<endl;


    cout<< "Problem 4: Largest palindrome made from the product of two 3-digit numbers is: "<<endl;
    cout<< largestPalindromeProduct() <<endl;
    cout<<"---------------------------------------------------------------------"<<endl;
    return 0;
}

